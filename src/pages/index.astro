---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import TopLayout from "@layouts/TopLayout.astro";
import BottomLayout from "@layouts/BottomLayout.astro";
import SearchCollectionWithPreview from "@components/SearchCollectionWithPreview";
import HighlightsColumn from "@components/HighlightsColumn.astro";
import { BLOG, SITE } from "@consts";
import { editModeScript } from "@lib/editMode";
import { settingsScript } from "@lib/settings";
import { marked } from "marked";
import { createHighlighter } from "shiki";

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const tags = [...new Set(posts.flatMap((post) => post.data.tags))].sort(
  (a, b) => a.localeCompare(b)
);

// Calculate tag counts
const tagCounts: Record<string, number> = {};
posts.forEach((post) => {
  post.data.tags.forEach((tag) => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

// Initialize Shiki highlighter
const highlighter = await createHighlighter({
  themes: ["github-dark", "github-light"],
  langs: [
    "javascript",
    "typescript",
    "html",
    "css",
    "json",
    "yaml",
    "markdown",
    "bash",
    "shell",
    "jsx",
    "tsx",
    "astro",
    "python",
    "go",
    "rust",
    "java",
    "php",
    "sql",
  ],
});

// Configure marked with Shiki syntax highlighting
marked.use({
  renderer: {
    code: function (token) {
      const code = token.text || token.code || String(token);
      const lang = token.lang || token.language;

      if (!lang) {
        return `<pre><code>${code}</code></pre>`;
      }

      try {
        const highlighted = highlighter.codeToHtml(code, {
          lang: lang,
          theme: "github-dark",
        });

        return highlighted;
      } catch (e) {
        console.error(`Shiki highlighting error for language "${lang}":`, e);
        return `<pre><code class="language-${lang}">${code}</code></pre>`;
      }
    },
  },
});

// Process markdown content for posts
const postContents: Record<string, string> = {};
for (const post of posts) {
  try {
    // Convert markdown to HTML for preview with syntax highlighting
    const htmlContent = marked(post.body);
    postContents[post.slug] = htmlContent;
  } catch (e) {
    console.error(`Error processing content for ${post.slug}:`, e);
    postContents[post.slug] = post.data.summary || "";
  }
}

const estimated_initial_size =
  28 + posts.length * 158 + (posts.length - 1) * 12;
---

<PageLayout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
  <TopLayout>
    <!-- Title and description removed for compact layout -->
  </TopLayout>
  <BottomLayout>
    <div id="homepage-layout" class="grid grid-cols-1 w960:grid-cols-3 gap-8">
      <!-- Main content (2/3 width when highlights shown, full width otherwise) -->
      <div id="main-content" class="w960:col-span-2">
        <div
          id="search-collection-wrapper"
          class="animate"
          style={{ minHeight: `${estimated_initial_size}px` }}
        >
          <script is:inline set:html={editModeScript} />
          <script is:inline set:html={settingsScript} />
          <SearchCollectionWithPreview
            client:load
            entry_name={"posts"}
            tags={tags}
            data={posts}
            tagCounts={tagCounts}
            editMode={SITE.EDIT_MODE}
            clientEditMode={true}
            contents={postContents}
          />
        </div>
      </div>

      <!-- Highlights column (1/3 width) - only visible at 960px+ -->
      <div id="highlights-column" class="hidden w960:block w960:col-span-1">
        <div class="w960:sticky w960:top-20">
          <HighlightsColumn />
        </div>
      </div>
    </div>

    <script is:inline>
      function updateLayoutBasedOnSettings() {
        const settings = window.getSiteSettings();
        const highlightsColumn = document.getElementById("highlights-column");
        const mainContent = document.getElementById("main-content");
        const homepageLayout = document.getElementById("homepage-layout");

        if (settings.showHighlightsColumn) {
          // Show highlights column (2/3 + 1/3 layout)
          highlightsColumn?.classList.remove("hidden");
          highlightsColumn?.classList.add("w960:block");
          mainContent?.classList.remove("w960:col-span-3");
          mainContent?.classList.add("w960:col-span-2");
          homepageLayout?.classList.add("w960:grid-cols-3");
        } else {
          // Hide highlights column (full width layout)
          highlightsColumn?.classList.add("hidden");
          highlightsColumn?.classList.remove("w960:block");
          mainContent?.classList.remove("w960:col-span-2");
          mainContent?.classList.add("w960:col-span-3");
          homepageLayout?.classList.remove("w960:grid-cols-3");
        }
      }

      // Initialize layout on page load
      updateLayoutBasedOnSettings();

      // Listen for settings changes
      window.addEventListener("settingsChanged", updateLayoutBasedOnSettings);
    </script>
  </BottomLayout>

  <!-- Floating Add Post Button -->
  <a
    href="/editor"
    title="Add a new post"
    class="fixed bottom-6 right-6 z-50 size-14 bg-blue-600 opacity-60 hover:bg-blue-700 text-white rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105"
  >
    <span class="text-2xl font-light leading-none">+</span>
  </a>
</PageLayout>
